// Generated by gencpp from file corbslam_server/corbslam_updateRequest.msg
// DO NOT EDIT!


#ifndef CORBSLAM_SERVER_MESSAGE_CORBSLAM_UPDATEREQUEST_H
#define CORBSLAM_SERVER_MESSAGE_CORBSLAM_UPDATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace corbslam_server
{
template <class ContainerAllocator>
struct corbslam_updateRequest_
{
  typedef corbslam_updateRequest_<ContainerAllocator> Type;

  corbslam_updateRequest_()
    : CID(0)
    , TYPE(0)
    , COUNT(0)
    , DATA()  {
    }
  corbslam_updateRequest_(const ContainerAllocator& _alloc)
    : CID(0)
    , TYPE(0)
    , COUNT(0)
    , DATA(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _CID_type;
  _CID_type CID;

   typedef int32_t _TYPE_type;
  _TYPE_type TYPE;

   typedef int32_t _COUNT_type;
  _COUNT_type COUNT;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _DATA_type;
  _DATA_type DATA;




  typedef boost::shared_ptr< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct corbslam_updateRequest_

typedef ::corbslam_server::corbslam_updateRequest_<std::allocator<void> > corbslam_updateRequest;

typedef boost::shared_ptr< ::corbslam_server::corbslam_updateRequest > corbslam_updateRequestPtr;
typedef boost::shared_ptr< ::corbslam_server::corbslam_updateRequest const> corbslam_updateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace corbslam_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'corbslam_server': ['/home/lifu/catkin_ws/src/corbslam_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff2d73c5ba59321e3e9eb4ca71fd3b55";
  }

  static const char* value(const ::corbslam_server::corbslam_updateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff2d73c5ba59321eULL;
  static const uint64_t static_value2 = 0x3e9eb4ca71fd3b55ULL;
};

template<class ContainerAllocator>
struct DataType< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "corbslam_server/corbslam_updateRequest";
  }

  static const char* value(const ::corbslam_server::corbslam_updateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 CID\n\
int32 TYPE\n\
int32 COUNT\n\
string DATA\n\
";
  }

  static const char* value(const ::corbslam_server::corbslam_updateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CID);
      stream.next(m.TYPE);
      stream.next(m.COUNT);
      stream.next(m.DATA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct corbslam_updateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::corbslam_server::corbslam_updateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::corbslam_server::corbslam_updateRequest_<ContainerAllocator>& v)
  {
    s << indent << "CID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CID);
    s << indent << "TYPE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TYPE);
    s << indent << "COUNT: ";
    Printer<int32_t>::stream(s, indent + "  ", v.COUNT);
    s << indent << "DATA: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.DATA);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORBSLAM_SERVER_MESSAGE_CORBSLAM_UPDATEREQUEST_H
